name: Sync to Hugging Face Space

"on":
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  deploy-to-hf:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      HF_USERNAME: ${{ vars.HF_USERNAME }}
      SPACE_NAME:  ${{ vars.SPACE_NAME }}
      HF_TOKEN:    ${{ secrets.HF_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Verify inputs
        run: |
          set -e
          if [ -z "${{ env.HF_USERNAME }}" ] || [ -z "${{ env.SPACE_NAME }}" ]; then
            echo "::error::Missing repo-level variables HF_USERNAME or SPACE_NAME."
            exit 1
          fi
          if [ -z "${{ env.HF_TOKEN }}" ]; then
            echo "::error::Missing secret HF_TOKEN."
            exit 1
          fi

      # --- NEW: Preflight 1 – Token sanity & identity ---
      - name: Preflight – token sanity & identity
        env:
          HF_TOKEN: ${{ env.HF_TOKEN }}
        run: |
          set -e
          # 0) Basic checks
          if [ -z "$HF_TOKEN" ]; then
            echo "::error::HF_TOKEN is empty in this repo."
            exit 1
          fi
          if ! printf "%s" "$HF_TOKEN" | grep -q '^hf_'; then
            echo "::error::HF_TOKEN is not a Hugging Face token (must start with 'hf_')."
            exit 1
          fi

          # 1) Check for trailing newline/whitespace without printing token
          # Print last byte hex; 0a indicates newline
          lasthex=$(printf "%s" "$HF_TOKEN" | tail -c1 | od -An -t x1 | tr -d ' \n')
          if [ "$lasthex" = "0a" ]; then
            echo "::warning::HF_TOKEN appears to end with a newline. Re-paste it without trailing newline."
          fi

          # 2) whoami – confirms which HF account the token belongs to
          echo "Calling whoami-v2 to verify token owner…"
          curl -fsS -H "Authorization: Bearer ${HF_TOKEN}" https://huggingface.co/api/whoami-v2

      # --- NEW: Preflight 2 – Space existence/permission ---
      - name: Preflight – space existence & permission
        env:
          HF_USERNAME: ${{ env.HF_USERNAME }}
          SPACE_NAME:  ${{ env.SPACE_NAME }}
          HF_TOKEN:    ${{ env.HF_TOKEN }}
        run: |
          set -e
          echo "Resolved Space: ${HF_USERNAME}/${SPACE_NAME}"
          STATUS=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${HF_TOKEN}" \
            "https://huggingface.co/api/spaces/${HF_USERNAME}/${SPACE_NAME}")

          echo "GET /api/spaces/${HF_USERNAME}/${SPACE_NAME} -> HTTP ${STATUS}"
          case "$STATUS" in
            200)
              echo "OK: Space exists and token can read metadata."
              ;;
            401|403)
              echo "::error::Auth failed (HTTP ${STATUS}). Token invalid, lacks 'Read and write', or not owner/collaborator for this Space."
              echo "Fix: Create a new PAT at https://huggingface.co/settings/tokens with 'Read and write' under the correct HF account."
              exit 1
              ;;
            404)
              echo "::error::Space not found (HTTP 404). Check exact slug/casing or create the Space first."
              exit 1
              ;;
            *)
              echo "::warning::Unexpected API status ${STATUS}. Proceeding, but push may still fail."
              ;;
          esac

      - name: Prepare clean deploy tree (_dist)
        run: |
          set -e
          rm -rf _dist
          mkdir -p _dist
          # Core app files
          cp requirements.txt _dist/
          # ⬇️ Include all top-level Python modules
          cp ./*.py _dist/ || true
          # Space metadata in README (front matter)
          if [ -f README.md ]; then cp README.md _dist/; fi
          # Optional: example env for docs (HF ignores .env files)
          if [ -f .env.example ]; then cp .env.example _dist/; fi
          # Runtime data/assets
          if [ -d me ]; then mkdir -p _dist/me && cp -r me/* _dist/me/; fi
          # Keep the Space clean
          printf ".env\n*.pyc\n__pycache__/\n" > _dist/.gitignore

      - name: Validate runtime assets exist
        run: |
          set -e
          ls -la _dist
          if [ -d "_dist/me" ]; then
            if [ ! -f "_dist/me/Profile.json" ] && [ ! -f "_dist/me/profile.json" ]; then
              echo "::warning::'_dist/me/Profile.json' not found. If your app expects it, add it to the repo."
            fi
          fi

      - name: Push to Hugging Face Space (force clean deploy)
        env:
          HF_USERNAME: ${{ env.HF_USERNAME }}
          SPACE_NAME:  ${{ env.SPACE_NAME }}
          HF_TOKEN:    ${{ env.HF_TOKEN }}
        run: |
          set -e
          cd _dist
          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Deploy to HF Space"
          REMOTE="https://${HF_USERNAME}:${HF_TOKEN}@huggingface.co/spaces/${HF_USERNAME}/${SPACE_NAME}"
          echo "Pushing to: https://huggingface.co/spaces/${HF_USERNAME}/${SPACE_NAME} (HEAD -> main)"
          git push -f "$REMOTE" HEAD:main

