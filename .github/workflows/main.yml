name: Sync to Hugging Face Space

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      HF_USER:  janaka2                 # <-- EXACT username/org
      HF_SPACE: RAG_Powerd_Chat_Bot     # <-- EXACT Space name (as in URL)

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Show repo tree (debug)
        run: |
          echo "== Top-level files in the repo =="
          ls -la
          echo "== Python files at top level =="
          ls -la *.py || true
          echo "== Git status =="
          git status

      - name: Quick sanity checks
        run: |
          if [ ! -f "app.py" ]; then
            echo "::error::No app.py at repository root. Hugging Face Spaces needs app_file: app.py or a valid path."
            echo "If your app is in a subfolder (e.g. src/app.py), either move it to the root OR set 'app_file: src/app.py' in README front-matter."
            exit 1
          fi
          if [ ! -f "requirements.txt" ]; then
            echo "::warning::requirements.txt not found at repo root. Add one so the Space can install dependencies."
          fi
          if ! grep -q "sdk:" README.md || ! grep -q "app_file:" README.md; then
            echo "::warning::README.md front-matter missing. Add:"
            echo "---"
            echo "sdk: gradio"
            echo "app_file: app.py"
            echo "python_version: 3.12"
            echo "---"
          fi

      - name: Install huggingface_hub
        run: |
          pipx install huggingface_hub || pip install --upgrade huggingface_hub

      - name: Verify HF token and identity
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          if [ -z "${HF_TOKEN}" ]; then
            echo "::error::HF_TOKEN secret is missing. Add it in GitHub > Settings > Secrets and variables > Actions."
            exit 1
          fi
          python - <<'PY'
from huggingface_hub import whoami
import os, sys
tok=os.environ.get("HF_TOKEN")
try:
    me=whoami(tok)
    print(f"✅ HF whoami: {me}")
except Exception as e:
    print("❌ HF whoami failed:", e)
    sys.exit(1)
PY

      - name: Ensure Space exists (create if needed)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USER:  ${{ env.HF_USER }}
          HF_SPACE: ${{ env.HF_SPACE }}
        run: |
          python - <<'PY'
from huggingface_hub import HfApi
import os
api = HfApi()
user  = os.environ["HF_USER"]
space = os.environ["HF_SPACE"]
token = os.environ["HF_TOKEN"]
repo_id = f"{user}/{space}"
api.create_repo(
    repo_id=repo_id,
    repo_type="space",
    exist_ok=True,
    token=token,
    space_sdk="gradio"
)
print(f"✅ Space ensured: https://huggingface.co/spaces/{repo_id}")
PY

      - name: Install Git LFS
        run: git lfs install

      - name: Push to HF Space (force, token in remote URL)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USER:  ${{ env.HF_USER }}
          HF_SPACE: ${{ env.HF_SPACE }}
        run: |
          set -e
          REMOTE_URL="https://${HF_USER}:${HF_TOKEN}@huggingface.co/spaces/${HF_USER}/${HF_SPACE}"
          git remote add hf "${REMOTE_URL}" || git remote set-url hf "${REMOTE_URL}"
          echo "Pushing HEAD -> main on Space ${HF_USER}/${HF_SPACE}"
          git push --force hf HEAD:main

      - name: Print remotes & HEAD (debug if failure)
        if: failure()
        run: |
          git remote -v
          git status
          git log -1 --oneline
